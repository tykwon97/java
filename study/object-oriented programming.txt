<java>
- 객체 지향 프로그래밍

new 는 클래스로부터 객체를 생성시키는 연산자이다.
ex) 클래스 변수;
     변수 = new class();

메소드를 오버로딩할 때 주의할 점은 매개 변수의 타입과 개수, 순서가 똑같을 경우 매개 변수 이름만 바꾸는 것은 메소드 오버로딩이라고 볼 수 없다.또한 리턴 타입만 다르고 매개 변수가 동일하다면 이것은 오버로딩이 아니다. 왜냐하면 리턴 타입은 자바 가상 기계가 메소드를 선택할 떄 아무런 도움을 주지 못하기 때문이다.

정적 필드와 정적 메소드는 클래스에 고정된 멤버이므로 클래스 로더가 클래스를 로딩해서 메소드 메모리 영역에 적재할 때 클래스 별로 관리된다. 
-> 따라서 클래스의 로딩이 끝나면 바로 사용할 수 있다.

정적 필드는 필드 선언과 동시에 초기값을 주는 것이 보통이다.
ex) static double pi = 3.14159;

final 필드는 초기값이 저장되면 이것이 최종적인 값이 되어서 프로그램 실행 도중에 수정 할 수 없다는 것이다. 
ex) final 타입 필드 [= 초기값];
-> 복잡한 초기화 코드가 필요하거나 객체 생성 시에 외부 데이터로 초기화해야 한다면 생성자에서 초기값을 지정해야한다. 생성자는 final 필드의 최종 초기화를 마쳐야 하는데, 만약 초기화되지 않은 final 필드를 그래도 남겨두면 컴파일 에러가 발생한다.

상수는 static 하면서 final 해야된다.

클래스를 선언할 떄 가능하다면 필드를 private로 선언해서 외부로부터 보호하고, 필드에 대한 Setter와 Getter 메소드를 작성해서 필드값을 안전하게 변경/사용하는 것이 좋다.
필드 타입이 boolean일 경우에는 Getter는 get으로 시작하지 않고 is로 시작하는 것이 관례이다.