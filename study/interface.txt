<인터페이스>

자바에서 인터페이스는 객체의 사용 방법을 정의한 타입이다.
->인터페이스는 객체의 ㄱ환성을 높여주기 때문에 다형성을 구현하는 매우 중요한 역할을 한다.
ex) [ public ] interface 인터페이스명 { ... }

클래스는 필드, 생성자, 메소드를 구성 멤버로 가지는데 비해, 인터페이스는 상수와 메소드만을 구성 멤버로 가진다.
인터페이스는 객체로 생성할 수 없기 떄문에 생성자를 가질 수 없다. 

ex)

interface 인터페이스명 {
	//상수
	타입 상수명 = 값;
	//추상 메소드
	타입 메소드명(매개변수, ...) { ... }
	//디폴트 메소드
	default 타입 메소드명 (매개변수, ... ) {...}
	//정적 메소드
	static 타입 메소드명 (매개변수, ...) { ... }
}
상수 : 인터페이스에서 값을 정해줄테니 함부로 바꾸지 말고 제공해주는 값만 참조해라 (절대적)
추상메소드 : 가이드만 줄테니 추상메소드를 오버라이팅해서 재구현해라. (강제적)
디폴트메소드 : 인터페이스에서 기본적으로 제공해주지만, 맘에 안들면 각자 구현해서 써라. (선택적)
정적메소드 : 인터페이스에서 제공해주는 것으로 무조건 사용 (절대적)

상수는 public static final로 선언하는데 클래스에서 이미 학습한바 있다. 따라서 인터페이스에 선언된 필드는 모두 public static final의 특성을 갖는다. public static final을 생략하더라도 자동적으로 컴파일 과정에서 붙게된다.

만약 인터페이스에 선언된 추상 메소드에 대응하는 실체메소드를 구현 클래스가 작성하지 않으면 구현 클래스는 자동적으로 추상 클래스가 된다. 그렇기 때문에 클래스 선언부에  abstract 키워드를 추가해야 한다.

default 메소드는 인터페이스에 선언되지만, 인터페이스에서 바로 사용할 수 없다. 디폴트 메소드는 추상메소드가 아닌 인스턴스 메소드이므로 구현 객체가 있어야 사용할 수 있다.

정적 메소드는 인터페이스로 바로 호출 가능!!

인터페이스는 메소드의 매개 변수로 많이 등장한다. 인터페이스 타입으로 매개 변수를 선언하면 메소드 호출 시 매개값으로 여러가지 종류의 구현 객체를 줄 수 있어 메소드 실행 결과가 다양하게 나온다.

매개 값을 다양화하기 위해서 상속에서는 매개 변수를 부모 타입으로 선언하고 호출할 떄에는 자식 객체를 대입

구현 객체가 인터페이스 타입으로 자동 변환되면, 인터페잇에 선언된 메소드만 사용 가능하다는 제약 사항이 따른다.

어떤 구현 객체가 변환되어 있는지 알 수 없는 상태에서 무작정 변환을 할 경우 ClassCastException이 발생할 수 있다.
ex) Vehicle vehicle = new Taxi();
     Bus bus = (Bus) Vehicle;
	->다음과 같이 Taxi객체가 인터페이스로 변환되어 있을 경우, Bus 타입으로 강제 타입 변환하면 구현 클래스 타입이 다르므로 ClassCastException이 발생한다.
	->상속에서 객체 타입을 확인하기 위해 instancesof 연산자 사용

인터페이스에서 디폴트 메소드를 허용한 이유는 기존 인터페이스를 확장해서 새로운 기능을 추가하기 위해서이다. 기존 인터페이스의 이름과 추상 메소드의 변경 없이 디폴트 메소드만 추가할 수 있기 때문에 이전에 개발한 구현 클래스를 그대로 사용할 수 있으면서 새롭게 개발하는 클래스는 디폴트 메소드를 활용할 수 있다.

디폴트 메소드는 추상 메소드가 아니기 때문에 구현 클래스에서 실체 메소드를 작성할 필요가 없다.

<추상 클래스>
 추상 클래스(abstract class)란 하나 이상의 추상 메소드(abstract method)를 포함하는 클래스이다. 추상 메소드는 선언만 있고 본체는 없는 함수이며 선언부에 ‘abstract’ 라는 키워드를 붙인다. 추상 메소드가 포함되었다면 클래스도 추상 클래스이므로 클래스명 앞에도 ‘abstract’키워드를 붙여야 한다.
추상 클래스는 추상 메서드를 포함하고 객체화 할 수 없다는 점만 제외하고 일반 클래스와 다르지 않으며 생성자, 멤버변수와 일반 메서드도 가질 수 있다. 추상 클래스 자체로는 클래스로의 역할을 하지 못하며 객체를 생성할 수 없지만 새로운 클래스를 작성하는데 있어서 부모 클래스로서 중요한 역할을 갖는다. 위의 예에서 Animal 클래스는 직접 객체를 생성하지 못하고 이를 상속받는 자식 클래스에서는 추상 메소드의 구체적인 본체를 가질 수 있다.
